name: 'Internet Computer Deploy Action'
description: 'Deploy Internet Computer canisters and frontend assets to IC networks'

inputs:
  pem_key:
    description: 'Base64 encoded PEM key for authentication'
    required: true
  network:
    description: 'Network to deploy to (local, testnet, ic)'
    required: true
    default: 'ic'
  canister_name:
    description: 'Name of the canister to deploy (optional if deploying all canisters)'
    required: false
  deploy_frontend:
    description: 'Whether to deploy frontend assets (default: true)'
    required: false
    default: 'true'
  frontend_dir:
    description: 'Directory containing frontend assets (default: dist)'
    required: false
    default: 'dist'
  package:
    description: 'Rust package name to build'
    required: false
  build_args:
    description: 'Arguments to pass to cargo build'
    required: false
    default: ''
  test:
    description: 'Run tests with cargo test'
    required: false
    default: 'true'
  gzip:
    description: 'Gzip the wasm file'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy

    - name: Install dfx
      uses: dfinity/setup-dfx@main

    - name: Authenticate dfx
      shell: bash
      run: |
        # Check if identity exists, if not create it
        if ! dfx identity list | grep -q "deploy_identity"; then
          echo ${{ inputs.pem_key }} | base64 --decode > deploy_identity.pem
          dfx identity import --storage-mode=plaintext deploy_identity deploy_identity.pem
        fi
        dfx identity use deploy_identity

    - name: Build
      shell: bash
      env:
        CARGO_TERM_COLOR: always
        RUSTFLAGS: "-D warnings"
        CARGO_BUILD_TARGET: wasm32-unknown-unknown
      run: cargo build --release -p "${{ inputs.package }}" ${{ inputs.build_args }}

    - name: Create wasm directory
      shell: bash
      if: inputs.gzip == 'true'
      run: mkdir -p wasm

    - name: Gzip Wasm
      shell: bash
      if: inputs.gzip == 'true'
      run: |
        gzip -c target/wasm32-unknown-unknown/release/${{ inputs.package }}.wasm > wasm/${{ inputs.package }}_${{ github.sha }}.wasm.gz
        cp target/wasm32-unknown-unknown/release/${{ inputs.package }}.wasm wasm/${{ inputs.package }}_${{ github.sha }}.wasm

        gzip -c target/wasm32-unknown-unknown/release/${{ inputs.package }}.wasm > wasm/${{ inputs.package }}.wasm.gz
        cp target/wasm32-unknown-unknown/release/${{ inputs.package }}.wasm wasm/${{ inputs.package }}.wasm

    - name: Tests
      shell: bash
      if: inputs.test == 'true'
      env:
        CARGO_TERM_COLOR: always
        RUSTFLAGS: "-D warnings"
      run: cargo test

    - name: Deploy canisters
      shell: bash
      env:
        DFX_WARNING: "-mainnet_plaintext_identity"
        CARGO_BUILD_TARGET: "wasm32-unknown-unknown"
        CARGO_TERM_COLOR: "always"
        RUSTFLAGS: "-D warnings"
      run: |
        if [ -n "${{ inputs.canister_name }}" ]; then
          dfx deploy ${{ inputs.canister_name }} --network ${{ inputs.network }} --yes
        else
          dfx deploy --network ${{ inputs.network }} --yes
        fi

    - name: Deploy frontend assets
      if: ${{ inputs.deploy_frontend == 'true' }}
      shell: bash
      env:
        DFX_WARNING: "-mainnet_plaintext_identity"
        CARGO_BUILD_TARGET: "wasm32-unknown-unknown"
        CARGO_TERM_COLOR: "always"
        RUSTFLAGS: "-D warnings"
      run: |
        if [ -d "${{ inputs.frontend_dir }}" ]; then
          dfx canister install frontend --network ${{ inputs.network }} --yes
        else
          echo "Frontend directory not found at ${{ inputs.frontend_dir }}"
          exit 1
        fi 