name: 'Internet Computer Deploy Action'
description: 'Deploy Internet Computer canisters and frontend assets to IC networks'

inputs:
  pem_key:
    description: 'Base64 encoded PEM key for authentication'
    required: true
  network:
    description: 'Network to deploy to (local, testnet, ic)'
    required: true
    default: 'ic'
  canister_name:
    description: 'Name of the canister to deploy (optional if deploying all canisters)'
    required: false
  deploy_frontend:
    description: 'Whether to deploy frontend assets (default: true)'
    required: false
    default: 'true'
  frontend_dir:
    description: 'Directory containing frontend assets (default: dist)'
    required: false
    default: 'dist'
  backend_package:
    description: 'Name of your backend Rust package as specified in Cargo.toml (e.g., "my_backend", "backend", "canister")'
    required: true
  frontend_package:
    description: 'Name of your frontend package (default: frontend)'
    required: false
    default: 'frontend'
  build_args:
    description: 'Arguments to pass to cargo build'
    required: false
    default: ''
  test:
    description: 'Run tests with cargo test'
    required: false
    default: 'true'
  gzip:
    description: 'Gzip the wasm file'
    required: false
    default: 'true'
  frontend_src_dir:
    description: 'Directory containing frontend source code (default: src/frontend)'
    required: false
    default: 'src/frontend'
  min_cycles:
    description: 'Minimum cycles balance required (in TC, default: 1)'
    required: false
    default: '1'

runs:
  using: "composite"
  steps:
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy

    - name: Install dfx
      uses: dfinity/setup-dfx@main

    - name: Authenticate dfx
      shell: bash
      run: |
        # Check if identity exists, if not create it
        if ! dfx identity list | grep -q "deploy_identity"; then
          echo ${{ inputs.pem_key }} | base64 --decode > deploy_identity.pem
          dfx identity import --storage-mode=plaintext deploy_identity deploy_identity.pem
        fi
        dfx identity use deploy_identity

    - name: Check Cycles Balance
      shell: bash
      env:
        DFX_WARNING: "-mainnet_plaintext_identity"
      run: |
        source "$HOME/.local/share/dfx/env"
        BALANCE=$(dfx cycles balance --network ${{ inputs.network }} | grep -o '[0-9.]*' | head -1)
        echo "Current cycles balance: $BALANCE TC"
        if (( $(echo "$BALANCE < ${{ inputs.min_cycles }}" | bc -l) )); then
          echo "Warning: Cycles balance is below minimum threshold of ${{ inputs.min_cycles }} TC"
          echo "Please ensure you have sufficient cycles for deployment"
          exit 1
        fi

    - name: Build
      shell: bash
      env:
        CARGO_TERM_COLOR: always
        RUSTFLAGS: "-D warnings"
        CARGO_BUILD_TARGET: wasm32-unknown-unknown
      run: cargo build --release -p "${{ inputs.backend_package }}" ${{ inputs.build_args }}

    - name: Create wasm directory
      shell: bash
      if: inputs.gzip == 'true'
      run: mkdir -p wasm

    - name: Gzip Wasm
      shell: bash
      if: inputs.gzip == 'true'
      run: |
        gzip -c target/wasm32-unknown-unknown/release/${{ inputs.backend_package }}.wasm > wasm/${{ inputs.backend_package }}_${{ github.sha }}.wasm.gz
        cp target/wasm32-unknown-unknown/release/${{ inputs.backend_package }}.wasm wasm/${{ inputs.backend_package }}_${{ github.sha }}.wasm

        gzip -c target/wasm32-unknown-unknown/release/${{ inputs.backend_package }}.wasm > wasm/${{ inputs.backend_package }}.wasm.gz
        cp target/wasm32-unknown-unknown/release/${{ inputs.backend_package }}.wasm wasm/${{ inputs.backend_package }}.wasm

    - name: Tests
      shell: bash
      if: inputs.test == 'true'
      env:
        CARGO_TERM_COLOR: always
        RUSTFLAGS: "-D warnings"
      run: cargo test

    - name: Deploy Canister
      shell: bash
      env:
        DFX_WARNING: "-mainnet_plaintext_identity"
      run: |
        source "$HOME/.local/share/dfx/env"
        echo "Deploying: ${{ inputs.canister_name }}"
        
        # Check if canister_ids.json exists in the repository
        if [ -f "canister_ids.json" ]; then
          echo "Found existing canister_ids.json, using existing canister IDs"
          CANISTER_ID=$(jq -r ".${{ inputs.canister_name }}.${{ inputs.network }}" canister_ids.json)
          if [ "$CANISTER_ID" != "null" ]; then
            echo "Using existing canister ID: $CANISTER_ID"
            dfx deploy --network ${{ inputs.network }} ${{ inputs.canister_name }} --no-wallet
          else
            echo "Canister ID not found in canister_ids.json, creating new canister"
            dfx deploy --network ${{ inputs.network }} ${{ inputs.canister_name }} --no-wallet
          fi
        else
          echo "No canister_ids.json found, creating new canister"
          dfx deploy --network ${{ inputs.network }} ${{ inputs.canister_name }} --no-wallet
        fi

    - name: Commit canister_ids.json
      if: success()
      shell: bash
      run: |
        if [ -f "canister_ids.json" ]; then
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add canister_ids.json
          git commit -m "chore: update canister IDs" || true
          git push origin main
        fi

    - name: Prepare Frontend Build
      if: ${{ inputs.deploy_frontend == 'true' }}
      shell: bash
      run: |
        source "$HOME/.local/share/dfx/env"
        mkdir -p .dfx/local/canisters/${{ inputs.frontend_package }}
        # Create a basic assetstorage.did file if it doesn't exist
        if [ ! -f "${{ inputs.frontend_src_dir }}/assetstorage.did" ]; then
          echo "service : {}" > ${{ inputs.frontend_src_dir }}/assetstorage.did
        fi
        cp ${{ inputs.frontend_src_dir }}/assetstorage.did .dfx/local/canisters/${{ inputs.frontend_package }}/

    - name: Build Frontend
      if: ${{ inputs.deploy_frontend == 'true' }}
      shell: bash
      env:
        DFX_WARNING: "-mainnet_plaintext_identity"
      run: |
        source "$HOME/.local/share/dfx/env"
        # Create necessary directories
        mkdir -p $GITHUB_WORKSPACE/wasm
        cd $GITHUB_WORKSPACE/${{ inputs.frontend_src_dir }}
        npm install
        # Build the frontend assets
        npm run build
        # Create the frontend canister
        cd $GITHUB_WORKSPACE
        dfx canister create ${{ inputs.frontend_package }} --network ${{ inputs.network }} || true
        # Build the frontend canister
        dfx build ${{ inputs.frontend_package }} --network ${{ inputs.network }}
        # Copy the wasm file to the wasm directory
        cp .dfx/${{ inputs.network }}/canisters/${{ inputs.frontend_package }}/${{ inputs.frontend_package }}.wasm.gz $GITHUB_WORKSPACE/wasm/${{ inputs.frontend_package }}.wasm.gz

    - name: Deploy Frontend
      if: ${{ inputs.deploy_frontend == 'true' }}
      shell: bash
      env:
        DFX_WARNING: "-mainnet_plaintext_identity"
      run: |
        source "$HOME/.local/share/dfx/env"
        echo "Deploying frontend..."
        
        # Check if canister_ids.json exists
        if [ -f "canister_ids.json" ]; then
          echo "Found existing canister_ids.json, using existing canister IDs"
          CANISTER_ID=$(jq -r ".${{ inputs.frontend_package }}.${{ inputs.network }}" canister_ids.json)
          if [ "$CANISTER_ID" != "null" ]; then
            echo "Using existing canister ID: $CANISTER_ID"
            dfx deploy --network ${{ inputs.network }} ${{ inputs.frontend_package }} --no-wallet
          else
            echo "Canister ID not found in canister_ids.json, creating new canister"
            dfx deploy --network ${{ inputs.network }} ${{ inputs.frontend_package }} --no-wallet
          fi
        else
          echo "No canister_ids.json found, creating new canister"
          dfx deploy --network ${{ inputs.network }} ${{ inputs.frontend_package }} --no-wallet
        fi

    - name: Deploy frontend assets
      if: ${{ inputs.deploy_frontend == 'true' }}
      shell: bash
      env:
        DFX_WARNING: "-mainnet_plaintext_identity"
      run: |
        source "$HOME/.local/share/dfx/env"
        dfx canister --network ${{ inputs.network }} call ${{ inputs.frontend_package }} store '(record{key="/index.html";content_type="text/html";content_encoding="identity";content=blob "<!DOCTYPE html><html><head><title>Actions Frontend</title></head><body><h1>Actions Frontend</h1></body></html>"})' --mode=reinstall
        dfx canister --network ${{ inputs.network }} call ${{ inputs.frontend_package }} store '(record{key="/main.js";content_type="application/javascript";content_encoding="identity";content=blob "console.log(\"Hello from Actions Frontend\");"})' --mode=reinstall 